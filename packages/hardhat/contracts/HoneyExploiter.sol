// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import "hardhat/console.sol";

import { IExploiter} from "./HoneyPause.sol";

error OnlyProtocolOperatorError();
error InvalidOperatorError();

event OperatorChanged(address oldOperator, address newOperator);
event Created(string name, address operator);
event Exploited();

contract HoneyExploiter is IExploiter {
    string public name = "Whathat exploliter test";
    bool public paused = false;
    address public operator;
    bytes public stateData;
    bool public failAssert = false;

    constructor(address _operator, string memory _name) {
		operator = _operator;
        name = _name;
        emit Created(_name, _operator);
	}

    modifier onlyOperator() {
        if (msg.sender != operator) {
            revert OnlyProtocolOperatorError();
        }
        _; 
    }

    function replaceOperator(address newOperator)
        external onlyOperator()
    {
        if (newOperator == address(0)) {
            revert InvalidOperatorError();
        }
        operator = newOperator;
        emit OperatorChanged(msg.sender, newOperator);
    }

    function exploit() external {
        emit Exploited();
    }

}
